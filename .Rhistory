theme_bw()
model.var.slope <- lmer(md_2015 ~ lr_income
+ (1 + lr_crime | MSOA11CD), data=lsoa.join)
msoa.rand <- REsim(model.var.slope)
plotREsim(msoa.rand)
model.var.slope <- lmer(md_2015 ~ lr_crime
+ (1 + lr_income | MSOA11CD), data=lsoa.join)
# create caterpillar graph
msoa.rand <- REsim(model.var.slope)
plotREsim(msoa.rand)
model.var.slope <- lmer(md_2015 ~ lr_crime
+ (1 + lr_income | MSOA11CD), data=lsoa.join)
model.var.slope <- lmer(md_2015 ~ lr_crime
+ (1 | MSOA11CD), data=lsoa.join)
model.var.slope <- lmer(md_2015 ~ lr_crime
+ (1 + lr_income | MSOA11CD), data=lsoa.join)
model.var.slope.fit <- lmer(md_2015 ~ lr_crime
+ (1 | MSOA11CD), data=lsoa.join)
anova(model.var.slope, model.var.slope.fit)
anova(model.var.slope.fit, model.var.slope)
anova(model.var.slope, model.var.slope.fit)
lsoa.join$lr_income
anova(model.var.slope, model.var.slope.fit)
VarCorr(model.var.slope)
summary(model.var.slope)
attr(, "stddev")
VarCorr(model.var.slope)
inc.random <- ranef(model.var.slope, postVar = TRUE)
inc.random <- ranef(model.var.slope, condVar = TRUE)
inc.random
inc.random <- ranef(model.var.slope, postVar = TRUE)
inc.random
inc.random <- ranef(model.var.slope, condVar = TRUE)
plot(inc.random[[1]], xlab = "Intercept (u0j)", ylab = "Slope of lr_income (u1j)")
abline(h = 0, col = "red")
abline(v = 0, col = "red")
predicteds <- fitted(model.var.slope)
predicteds
nrow(lsoa.join)
model.var.slope <- lmer(md_2015 ~ lr_crime
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope.fit <- lmer(md_2015 ~ lr_crime
+ (1 | MSOA11CD), data=lsoa.join)
anova(model.var.slope, model.var.slope.fit)
model.var.slope <- lmer(md_2015 ~ lr_crime
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope.fit <- lmer(md_2015 ~ lr_crime
+ (1 | MSOA11CD), data=lsoa.join,  REML = FALSE)
anova(model.var.slope, model.var.slope.fit)
?fitted
data.predicted <- data.frame(unique(predicteds))
data.predicted$unique.predicteds.
predicteds
data.predicted <- cbind(median_val = predicteds, lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
data.predicted
lsoa.join
data.predicted <- cbind(median_val = predicteds, lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
data.predicted <- data.frame(unique(data.predicted))
data.predicted <- data.predicted[order(data.predicted$msoa, data.predicted$lr_income)]
data.predicted$multinc <- rep(0, dim(data.predicted)[1])
data.predicted$multinc[data.predicted$msoa %in% unique(data.predicted$msoa[duplicated(data.predicted$msoa)])] <- 1
xyplot(median_val ~ msoa, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "blue")
library(lattice)
xyplot(median_val ~ msoa, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "blue")
library(lme4)
library(merTools)
library(dplyr)
library(spatialEco)
library(cowplot)
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "blue")
data.predicted
str(data.predicted)
data.predicted <- cbind(median_val = as.numeric(predicteds), lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
str(data.predicted)
data.predicted
head(data.predicted)
predicteds <- as.numeric(fitted(model.var.slope))
data.predicted <- cbind(median_val = predicteds, lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
head(data.predicted)
str(data.predicted)
data.predicted <- cbind(median_val = predicteds, lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
data.predicted$median_val
class(data.predicted)
data.predicted <- cbind(median_val = predicteds, lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
data.predicted <- data.frame(unique(data.predicted))
class(data.class())
class(data.predicted)
predicteds <- fitted(model.var.slope)
data.predicted <- cbind(median_val = predicteds, lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
data.predicted <- data.frame(unique(data.predicted))
data.predicted$median_val <- as.numeric(data.predicted$median_val)
data.predicted$lr_income <- as.numeric(data.predicted$lr_income)
str(data.predicted)
data.predicted <- data.predicted[order(data.predicted$msoa, data.predicted$lr_income), ]
data.predicted$multinc <- rep(0, dim(data.predicted)[1])
data.predicted$multinc[data.predicted$msoa %in% unique(data.predicted$msoa[duplicated(data.predicted$msoa)])] <- 1
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "blue")
xyplot(median_val ~ lr_income, data = data.predicted, groups = msoa, type = c("p", "l"), col = "blue")
xyplot(median_val ~ lr_income, data = data.predicted, groups = msoa, type = c("p", "l"), col = "blue")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "blue")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c( "l"), col = "blue")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "blue")
msoa.rand <- REsim(model.var.slope)
plotREsim(msoa.rand)
inc.random <- ranef(model.var.slope, condVar = TRUE)
plot(inc.random[[1]], xlab = "Intercept (u0j)", ylab = "Slope of lr_income (u1j)")
abline(h = 0, col = "red")
abline(v = 0, col = "red")
summaru(model.var.slope)
summary(model.var.slope)
u0 <- ranef(model.null, postVar = TRUE)
u0se <- sqrt(attr(u0[[1]], "condVar")[1, , ])
u0
str(u0)
u0se <- sqrt(attr(u0[[1]], "postVar")[1, , ])
u0
nrow(u0)
nrow(u0)str(u0)
str(u0)
summary(model.var.slope)
lsoa.join
getwd()
list.files()
msoa <- readOGR(dsn = ".", layer = "msoa", stringsAsFactors = FALSE)
plot(msoa)
lsoa.join
msoa.rand
msoa_code <- msoa.rand[msoa.rand$term == "(Intercept)", "groupID"]
msoa_slope <- msoa.rand[msoa.rand$term == "lr_income", "mean"]
msoa <- readOGR(dsn = ".", layer = "msoa", stringsAsFactors = FALSE)
msoa_code <- msoa.rand[msoa.rand$term == "(Intercept)", "groupID"]
msoa_intercept <- msoa.rand[msoa.rand$term == "(Intercept)", "mean"]
msoa_slope <- msoa.rand[msoa.rand$term == "lr_income", "mean"]
msoa_link <- data.frame(msoa_code, msoa_intercept, msoa_slope)
msoa_link$msoa_code <- as.character(msoa_link$msoa_code)
str(msoa_link)
str(msoa@data)
head(msoa_link)
msoa@data <- merge(msoa@data, msoa_link, by.x = "MSOA1CD", by.y = "msoa_code", all.x = TRUE)
msoa@data <- merge(msoa@data, msoa_link, by.x = "MSOA11CD", by.y = "msoa_code", all.x = TRUE)
head(msoa@data)
msoa <- readOGR(dsn = ".", layer = "msoa", stringsAsFactors = FALSE)
msoa_code <- msoa.rand[msoa.rand$term == "(Intercept)", "groupID"]
msoa_intercept <- msoa.rand[msoa.rand$term == "(Intercept)", "mean"]
msoa_slope <- msoa.rand[msoa.rand$term == "lr_income", "mean"]
msoa_link <- data.frame(msoa_code, msoa_intercept, msoa_slope)
msoa_link$msoa_code <- as.character(msoa_link$msoa_code)
msoa@data <- merge(msoa@data, msoa_link, by.x = "MSOA11CD", by.y = "msoa_code", all.x = TRUE)
head(msoa@data)
msoa_link
head(msoa@data)
temp <- msoa@data$msoa_slope
brks.temp <- classIntervals(temp, n = 5, style = "quantile")
temp
?classIntervals
temp <- msoa@data$msoa_slope
brks.temp <- classIntervals(temp, n = 5, style = "quantile", )
brks.temp
brks.temp <- round(brks.temp$brks, digits = 2)
brks.temp[1] <- brks.temp[1] - 0.01
brks.temp[5 + 1] <- brks.temp[5 + 1] + 0.01
xx <- msoa@bbox
spplot(msoa, "msoa_slope")
brewer.pal.info
spplot(msoa, "msoa_slope", sp.layout = list(scalebar, text1, text2, northarrow), at = brks.temp, col.regions = brewer.pal(5, "PuBu"), col="transparent", pretty=TRUE, colorkey=list(labels=list(at=brks.temp)))
# build scale bar
scalebar <- list("SpatialPolygonsRescale", layout.scale.bar(),
offset = c(min(xx[1,] + 1000),xx[2,1] + 1000), scale = 5000,    fill=c("transparent","black"))
text1 <- list("sp.text", c(min(xx[1,]) + 1000,xx[2,1] + 1500), "0")
text2 <- list("sp.text", c(min(xx[1,]) + 6000,xx[2,1] + 1500), "5 km")
northarrow <- list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(min(xx[1,]) + 2000,xx[2,1] + 2000), scale = 1500)
spplot(msoa, "msoa_slope", sp.layout = list(scalebar, text1, text2, northarrow), at = brks.temp, col.regions = brewer.pal(5, "PuBu"), col="transparent", pretty=TRUE, colorkey=list(labels=list(at=brks.temp)))
getwd()
msoa <- readOGR(dsn = ".", layer = "msoa", stringsAsFactors = FALSE)
msoa_code <- msoa.rand[msoa.rand$term == "(Intercept)", "groupID"]
msoa_intercept <- msoa.rand[msoa.rand$term == "(Intercept)", "mean"]
msoa_slope <- msoa.rand[msoa.rand$term == "lr_income", "mean"]
msoa_link <- data.frame(msoa_code, msoa_intercept, msoa_slope)
msoa_link$msoa_code <- as.character(msoa_link$msoa_code)
msoa@data <- merge(msoa@data, msoa_link, by.x = "MSOA11CD", by.y = "msoa_code", all.x = TRUE)
temp <- msoa@data$msoa_slope
brks.temp <- classIntervals(temp, n = 5, style = "quantile")
brks.temp <- round(brks.temp$brks, digits = 2)
brks.temp[1] <- brks.temp[1] - 0.01
brks.temp[5 + 1] <- brks.temp[5 + 1] + 0.01
# get bounding box
xx <- msoa@bbox
# build scale bar
scalebar <- list("SpatialPolygonsRescale", layout.scale.bar(),
offset = c(min(xx[1,] + 1000),xx[2,1] + 1000), scale = 5000,    fill=c("transparent","black"))
text1 <- list("sp.text", c(min(xx[1,]) + 1000,xx[2,1] + 1500), "0")
text2 <- list("sp.text", c(min(xx[1,]) + 6000,xx[2,1] + 1500), "5 km")
northarrow <- list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(min(xx[1,]) + 2000,xx[2,1] + 2000), scale = 1500)
spplot(msoa, "msoa_slope", sp.layout = list(scalebar, text1, text2, northarrow), at = brks.temp, col.regions = brewer.pal(5, "PuBu"), col="transparent", pretty=TRUE, colorkey=list(labels=list(at=brks.temp)))
getwd()
setwd("/Users/samcomber/Documents/spatial_analysis/shp/spatial_join")
msoa <- readOGR(dsn = ".", layer = "msoa", stringsAsFactors = FALSE)
msoa_code <- msoa.rand[msoa.rand$term == "(Intercept)", "groupID"]
msoa_intercept <- msoa.rand[msoa.rand$term == "(Intercept)", "mean"]
msoa_slope <- msoa.rand[msoa.rand$term == "lr_income", "mean"]
msoa_link <- data.frame(msoa_code, msoa_intercept, msoa_slope)
msoa_link$msoa_code <- as.character(msoa_link$msoa_code)
msoa@data <- merge(msoa@data, msoa_link, by.x = "MSOA11CD", by.y = "msoa_code", all.x = TRUE)
temp <- msoa@data$msoa_slope
brks.temp <- classIntervals(temp, n = 5, style = "quantile")
brks.temp <- round(brks.temp$brks, digits = 2)
brks.temp[1] <- brks.temp[1] - 0.01
brks.temp[5 + 1] <- brks.temp[5 + 1] + 0.01
# get bounding box
xx <- msoa@bbox
# build scale bar
scalebar <- list("SpatialPolygonsRescale", layout.scale.bar(),
offset = c(min(xx[1,] + 1000),xx[2,1] + 1000), scale = 5000,    fill=c("transparent","black"))
text1 <- list("sp.text", c(min(xx[1,]) + 1000,xx[2,1] + 3000), "0")
text2 <- list("sp.text", c(min(xx[1,]) + 6000,xx[2,1] + 1500), "5 km")
northarrow <- list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(min(xx[1,]) + 2000,xx[2,1] + 2000), scale = 1500)
spplot(msoa, "msoa_slope", sp.layout = list(scalebar, text1, text2, northarrow), at = brks.temp, col.regions = brewer.pal(5, "PuBu"), col="transparent", pretty=TRUE, colorkey=list(labels=list(at=brks.temp)))
setwd("/Users/samcomber/Documents/spatial_analysis/shp/spatial_join")
msoa <- readOGR(dsn = ".", layer = "msoa", stringsAsFactors = FALSE)
msoa_code <- msoa.rand[msoa.rand$term == "(Intercept)", "groupID"]
msoa_intercept <- msoa.rand[msoa.rand$term == "(Intercept)", "mean"]
msoa_slope <- msoa.rand[msoa.rand$term == "lr_income", "mean"]
msoa_link <- data.frame(msoa_code, msoa_intercept, msoa_slope)
msoa_link$msoa_code <- as.character(msoa_link$msoa_code)
msoa@data <- merge(msoa@data, msoa_link, by.x = "MSOA11CD", by.y = "msoa_code", all.x = TRUE)
temp <- msoa@data$msoa_slope
brks.temp <- classIntervals(temp, n = 5, style = "quantile")
brks.temp <- round(brks.temp$brks, digits = 2)
brks.temp[1] <- brks.temp[1] - 0.01
brks.temp[5 + 1] <- brks.temp[5 + 1] + 0.01
# get bounding box
xx <- msoa@bbox
# build scale bar
scalebar <- list("SpatialPolygonsRescale", layout.scale.bar(),
offset = c(min(xx[1,] + 1000),xx[2,1] + 1000), scale = 5000,    fill=c("transparent","black"))
text1 <- list("sp.text", c(min(xx[1,]) + 1000,xx[2,1] + 1600), "0")
text2 <- list("sp.text", c(min(xx[1,]) + 6000,xx[2,1] + 1600), "5 km")
northarrow <- list("SpatialPolygonsRescale", layout.north.arrow(),
offset = c(min(xx[1,]) + 2000,xx[2,1] + 2000), scale = 1500)
spplot(msoa, "msoa_slope", sp.layout = list(scalebar, text1, text2, northarrow), at = brks.temp, col.regions = brewer.pal(5, "PuBu"), col="transparent", pretty=TRUE, colorkey=list(labels=list(at=brks.temp)))
head(msoa@data)
nrow(msoa@data)
msoa_re
msoa.rand
mode.var.slope
model.var.slope
summary(model.var.slope)
u0 <- ranef(model.null, condVar = TRUE)
u0se <- sqrt(attr(u0[[1]], "postVar")[1, , ])
u0se
u0
msoa.id <- as.numeric(rownames(u0[[1]]))
u0tab <- cbind(msoa.id, u0[[1]], u0se)
u0tab
msoa.id <- as.numeric(rownames(u0[[1]]))
u0tab <- cbind(msoa.id, u0[[1]], u0se)
u0 <- ranef(model.null, condVar = TRUE)
u0se <- sqrt(attr(u0[[1]], "postVar")[1, , ])
msoa.id <- as.numeric(rownames(u0[[1]]))
msoa.id
msoa.id <- rownames(u0[[1]])
u0tab <- cbind(msoa.id, u0[[1]], u0se)
u0tab
colnames(u0tab) <- c("msoa.id", "u0", "u0se")
u0tab <- cbind(u0tab, c(1:dim(u0tab)[1]))
colnames(u0tab)[4] <- "u0rank"
u0tab <- u0tab[order(u0tab$msoa.id),]
u0tab[1:10,]
u0 <- ranef(model.null, condVar = TRUE)
u0se <- sqrt(attr(u0[[1]], "postVar")[1, , ])
# get msoa ids
msoa.id <- rownames(u0[[1]])
# column bind ids, residuals and standard errors
u0tab <- cbind(msoa.id, u0[[1]], u0se)
# rename columns
colnames(u0tab) <- c("msoa.id", "u0", "u0se")
# sort table by residuals
u0tab <- u0tab <- u0tab[order(u0tab$u0), ]
# create ranking
u0tab <- cbind(u0tab, c(1:dim(u0tab)[1]))
colnames(u0tab)[4] <- "u0rank"
u0tab
colnames(u0tab)[4] <- "u0rank"
u0tab <- u0tab[order(u0tab$msoa.id),]
u0tab[1:10,]
summary(model.null)
anova(model.var.slope, model.var.slope.fit)
summary(model.var.slope)
model.var.slope <- lmer(md_2015 ~ lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope.fit <- lmer(md_2015 ~ lr_income
+ (1 | MSOA11CD), data=lsoa.join,  REML = FALSE)
# compute anova for likelihood ratio
anova(model.var.slope, model.var.slope.fit)
model.var.slope <- lmer(md_2015 ~ lr_crime
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope.fit <- lmer(md_2015 ~ lr_crime
+ (1 | MSOA11CD), data=lsoa.join,  REML = FALSE)
# compute anova for likelihood ratio
anova(model.var.slope, model.var.slope.fit)
model.var.slope <- lmer(md_2015 ~ lr_crime + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope.fit <- lmer(md_2015 ~ lr_crime + lr_income
+ (1 | MSOA11CD), data=lsoa.join,  REML = FALSE)
# compute anova for likelihood ratio
anova(model.var.slope, model.var.slope.fit)
model.var.slope <- lmer(md_2015 ~ lr_crime + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope <- lmer(md_2015 ~ lr_crime + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope.fit <- lmer(md_2015 ~ lr_crime + lr_income
+ (1 | MSOA11CD), data=lsoa.join,  REML = FALSE)
# compute anova for likelihood ratio
anova(model.var.slope, model.var.slope.fit)
summary(model.var.slope)
msoa.rand <- REsim(model.var.slope)
plotREsim(msoa.rand)
summary(model.var.slope)
inc.random <- ranef(model.var.slope, condVar = TRUE)
inc.random
model.var.slope <- lmer(md_2015 ~ lr_crime + employm
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope <- lmer(md_2015 ~ lr_crime + lr_employm
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
inc.random <- ranef(model.var.slope, condVar = TRUE)
plot(inc.random[[1]], xlab = "Intercept (u0j)", ylab = "Slope of lr_income (u2j)")
abline(h = 0, col = "red")
abline(v = 0, col = "red")
msoa.rand <- REsim(model.var.slope)
plotREsim(msoa.rand)
model.var.slope <- lmer(md_2015 ~ lr_unemploym + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope <- lmer(md_2015 ~ lr_unemploy + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope <- lmer(md_2015 ~ lr_unemploym + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope <- lmer(md_2015 ~ lr_employm + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
e
summary(model.var.slope)
inc.random <- ranef(model.var.slope, condVar = TRUE)
plot(inc.random[[1]], xlab = "Intercept (u0j)", ylab = "Slope of lr_income (u2j)")
abline(h = 0, col = "red")
abline(v = 0, col = "red")
msoa.rand <- REsim(model.var.slope)
plotREsim(msoa.rand)
lsoa.join$lr_msoa.rand
msoa.rand
lr_crime
model.var.slope <- lmer(md_2015 ~ lr_crime + lr_income
+ (1 + lr_income | MSOA11CD), data=lsoa.join, REML = FALSE)
model.var.slope.fit <- lmer(md_2015 ~ lr_crime + lr_income
+ (1 | MSOA11CD), data=lsoa.join,  REML = FALSE)
inc.random <- ranef(model.var.slope, condVar = TRUE)
plot(inc.random[[1]], xlab = "Intercept (u0j)", ylab = "Slope of lr_income (u2j)")
abline(h = 0, col = "red")
abline(v = 0, col = "red")
msoa.rand <- REsim(model.var.slope)
plotREsim(msoa.rand)
inc.random <- ranef(model.var.slope, condVar = TRUE)
plot(inc.random[[1]], xlab = "Intercept (u0j)", ylab = "Slope of lr_income (u2j)")
abline(h = 0, col = "red")
abline(v = 0, col = "red")
# extract model fitted values
predicteds <- fitted(model.var.slope)
data.predicted <- cbind(median_val = predicteds, lr_income = lsoa.join$lr_income, msoa = lsoa.join$MSOA11CD)
data.predicted <- data.frame(unique(data.predicted))
data.predicted$median_val <- as.numeric(data.predicted$median_val)
data.predicted$lr_income <- as.numeric(data.predicted$lr_income)
data.predicted <- data.predicted[order(data.predicted$msoa, data.predicted$lr_income), ]
data.predicted$multinc <- rep(0, dim(data.predicted)[1])
data.predicted$multinc[data.predicted$msoa %in% unique(data.predicted$msoa[duplicated(data.predicted$msoa)])] <- 1
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "blue")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "#00FF00")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "#33FF00")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "#33FF33")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "#FFFF33")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "#00FFFF")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "#FF0000")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c( "l"), col = "#FF0000")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ], groups = msoa, type = c("p", "l"), col = "#FF0000")
data.predicted$multinc[data.predicted$msoa
%in% unique(data.predicted$msoa[duplicated(data.predicted$msoa)])] <- 1
data.predicted$multinc[data.predicted$msoa
%in% unique(data.predicted$msoa[duplicated(data.predicted$msoa)])] <- 1
data.predicted$multinc[data.predicted$msoa
%in% unique(data.predicted$msoa[
duplicated(data.predicted$msoa)])] <- 1
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ],
groups = msoa, type = c( "l"), col = "#FF0000")
xyplot(median_val ~ lr_income, data = data.predicted[data.predicted$multinc == 1, ],
groups = msoa, type = c( "l"), col = "#FF0000")
summary(model.null)
shiny::runApp('~/Documents/webmap')
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
shiny::runApp('~/Documents/webmap')
# download geojson
u <- "http://statistics.data.gov.uk/boundaries/E08000012.json"
# store in temporary directory
downloader::download(url = u, destfile = "/tmp/lpool.geojson")
lpool <- readOGR(dsn = "/tmp/lpool.geojson", layer = "OGRGeoJSON")
# access coords slot
lpool <- lpool@polygons[[1]]@Polygons[[1]]@coords
# build lat/lon + date string to send with postrequest
curl.string <- paste0('poly=',paste0(sprintf('%s,%s',lpool[,2], lpool[,1]), collapse = ':'))
dates = c("2015-12", "2016-01", "2016-02", "2016-03", "2016-04", "2016-05", "2016-06", "2016-07", "2016-08", "2016-09", "2016-10", "2016-11")
document <- lapply(dates, function(month) {
# format acceptable packet for http request
curl.string <- list(poly=c(curl.string), date=c(month))
# post custom polygon to police api (note: post needed as appending curl string to url is too long)
r <- httr::POST("https://data.police.uk/api/crimes-street/all-crime", body = curl.string, encode="multipart", verbose())
json <- content(r, "text")
# return as data.frame
jsonlite::fromJSON(txt=json)
})
# build master data.frame to append data.frame for individual months to
master <- data.frame(id=numeric(0), category=character(0), lat=character(0), lon=character(0), month=character(0), outcome_status=character(0))
d1 <- data.frame(category=document[[1]]$category,lat=document[[1]]$location$latitude, lon=document[[1]]$location$longitude, id=document[[1]]$id, name=document[[1]]$location$street$name, month=document[[1]]$month, outcome_status=document[[1]]$outcome_status$category)
d2 <- data.frame(category=document[[2]]$category,lat=document[[2]]$location$latitude, lon=document[[2]]$location$longitude, id=document[[2]]$id, name=document[[2]]$location$street$name, month=document[[2]]$month, outcome_status=document[[2]]$outcome_status$category)
d3 <- data.frame(category=document[[3]]$category,lat=document[[3]]$location$latitude, lon=document[[3]]$location$longitude, id=document[[3]]$id, name=document[[3]]$location$street$name, month=document[[3]]$month, outcome_status=document[[3]]$outcome_status$category)
d4 <- data.frame(category=document[[4]]$category,lat=document[[4]]$location$latitude, lon=document[[4]]$location$longitude, id=document[[4]]$id, name=document[[4]]$location$street$name, month=document[[4]]$month, outcome_status=document[[4]]$outcome_status$category)
d5 <- data.frame(category=document[[5]]$category,lat=document[[5]]$location$latitude, lon=document[[5]]$location$longitude, id=document[[5]]$id, name=document[[5]]$location$street$name, month=document[[5]]$month, outcome_status=document[[5]]$outcome_status$category)
d6 <- data.frame(category=document[[6]]$category,lat=document[[6]]$location$latitude, lon=document[[6]]$location$longitude, id=document[[6]]$id, name=document[[6]]$location$street$name, month=document[[6]]$month, outcome_status=document[[6]]$outcome_status$category)
d7 <- data.frame(category=document[[7]]$category,lat=document[[7]]$location$latitude, lon=document[[7]]$location$longitude, id=document[[7]]$id, name=document[[7]]$location$street$name, month=document[[7]]$month, outcome_status=document[[7]]$outcome_status$category)
d8 <- data.frame(category=document[[8]]$category,lat=document[[8]]$location$latitude, lon=document[[8]]$location$longitude, id=document[[8]]$id, name=document[[8]]$location$street$name, month=document[[8]]$month, outcome_status=document[[8]]$outcome_status$category)
d9 <- data.frame(category=document[[9]]$category,lat=document[[9]]$location$latitude, lon=document[[9]]$location$longitude, id=document[[9]]$id, name=document[[9]]$location$street$name, month=document[[9]]$month, outcome_status=document[[9]]$outcome_status$category)
d10 <- data.frame(category=document[[10]]$category,lat=document[[10]]$location$latitude, lon=document[[10]]$location$longitude, id=document[[10]]$id, name=document[[10]]$location$street$name, month=document[[10]]$month, outcome_status=document[[10]]$outcome_status$category)
d11 <- data.frame(category=document[[11]]$category,lat=document[[11]]$location$latitude, lon=document[[11]]$location$longitude, id=document[[11]]$id, name=document[[11]]$location$street$name, month=document[[11]]$month, outcome_status=document[[11]]$outcome_status$category)
d12 <- data.frame(category=document[[12]]$category,lat=document[[12]]$location$latitude, lon=document[[12]]$location$longitude, id=document[[12]]$id, name=document[[12]]$location$street$name, month=document[[12]]$month, outcome_status=document[[12]]$outcome_status$category)
# rbind each month to master data.frame
document <- rbind(master, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12)
document <- document[sample(nrow(document), 45000),]
x <- data.frame(lon=as.numeric(document$lon), lat=as.numeric(document$lat))
res.db <- dbscan::dbscan(x, 0.0015, 5)
plot(res.db, x,
frame = FALSE,
main="",
xlab="Longitude",
ylab="Latitude")
x <- data.frame(lon=as.numeric(document$lon), lat=as.numeric(document$lat))
res.db <- dbscan::dbscan(x, 0.0015, 5)
plot(res.db, x,
frame = FALSE,
main="",
xlab="Longitude",
ylab="Latitude")
x <- data.frame(lon=as.numeric(document$lon), lat=as.numeric(document$lat))
res.db <- dbscan::dbscan(x, 0.0015, 5)
plot(res.db, x,
frame = FALSE,
main="",
xlab="Longitude",
ylab="Latitude")
x <- data.frame(lat=as.numeric(document$lat), lon=as.numeric(document$lon))
res.db <- dbscan::dbscan(x, 0.0015, 5)
plot(res.db, x,
frame = FALSE,
main="",
xlab="Longitude",
ylab="Latitude")
document$lat
x <- data.frame(lat=document$lat, lon=document$lon)
res.db <- dbscan::dbscan(x, 0.0015, 5)
plot(res.db, x,
frame = FALSE,
x
x
str(x)
x <- data.frame(lat=as.numeric(document$lat), lon=as.numeric(document$lon))
str(x)
x
x
x <- data.frame(lat=document$lat, lon=document$lon)
x
str(x)
x <- data.frame(lat=as.numeric(levels(document$lat)), lon=as.numeric(levels(document$lon)))
x <- data.frame(lat=as.numeric(levels(document$lat)), lon=as.numeric(levels(document$lon)))
x <- data.frame(lat=as.numeric(document$lat), lon=as.numeric(document$lon))
x
x <- data.frame(lat=unfactor(document$lat), lon=as.numeric(document$lon))
runApp('~/Documents/webmap')
Q
x <- data.frame(lat=as.numeric(as.character(document$lat)), lon=as.numeric(document$lon))
x
x <- data.frame(lat=as.numeric(as.character(document$lat)), lon=as.numeric(as.character(document$lon)))
res.db <- dbscan::dbscan(x, 0.0015, 5)
plot(res.db, x,
frame = FALSE,
main="",
xlab="Longitude",
ylab="Latitude")
x <- data.frame(lon=as.numeric(as.character(document$lon)), lat=as.numeric(as.character(document$lat)))
res.db <- dbscan::dbscan(x, 0.0015, 5)
plot(res.db, x,
frame = FALSE,
main="",
xlab="Longitude",
ylab="Latitude")
runApp('~/Documents/webmap')
rsconnect::deployApp("/Users/samcomber/Documents/webmap/")
runApp('~/Documents/webmap')
runApp('~/Documents/webmap')
runApp('~/Documents/webmap')
runApp('~/Documents/webmap')
runApp('~/Documents/webmap')
